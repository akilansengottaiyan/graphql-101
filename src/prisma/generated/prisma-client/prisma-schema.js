module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateApp {
  count: Int!
}

type AggregateFlow {
  count: Int!
}

type AggregateStep {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type App {
  id: ID!
  url: String!
  createdBy: User!
  flows(where: FlowWhereInput, orderBy: FlowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flow!]
}

type AppConnection {
  pageInfo: PageInfo!
  edges: [AppEdge]!
  aggregate: AggregateApp!
}

input AppCreateInput {
  id: ID
  url: String!
  createdBy: UserCreateOneWithoutAppsInput!
  flows: FlowCreateManyWithoutAssociatedWithInput
}

input AppCreateManyWithoutCreatedByInput {
  create: [AppCreateWithoutCreatedByInput!]
  connect: [AppWhereUniqueInput!]
}

input AppCreateOneWithoutFlowsInput {
  create: AppCreateWithoutFlowsInput
  connect: AppWhereUniqueInput
}

input AppCreateWithoutCreatedByInput {
  id: ID
  url: String!
  flows: FlowCreateManyWithoutAssociatedWithInput
}

input AppCreateWithoutFlowsInput {
  id: ID
  url: String!
  createdBy: UserCreateOneWithoutAppsInput!
}

type AppEdge {
  node: App!
  cursor: String!
}

enum AppOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
}

type AppPreviousValues {
  id: ID!
  url: String!
}

input AppScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [AppScalarWhereInput!]
  OR: [AppScalarWhereInput!]
  NOT: [AppScalarWhereInput!]
}

type AppSubscriptionPayload {
  mutation: MutationType!
  node: App
  updatedFields: [String!]
  previousValues: AppPreviousValues
}

input AppSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AppWhereInput
  AND: [AppSubscriptionWhereInput!]
  OR: [AppSubscriptionWhereInput!]
  NOT: [AppSubscriptionWhereInput!]
}

input AppUpdateInput {
  url: String
  createdBy: UserUpdateOneRequiredWithoutAppsInput
  flows: FlowUpdateManyWithoutAssociatedWithInput
}

input AppUpdateManyDataInput {
  url: String
}

input AppUpdateManyMutationInput {
  url: String
}

input AppUpdateManyWithoutCreatedByInput {
  create: [AppCreateWithoutCreatedByInput!]
  delete: [AppWhereUniqueInput!]
  connect: [AppWhereUniqueInput!]
  set: [AppWhereUniqueInput!]
  disconnect: [AppWhereUniqueInput!]
  update: [AppUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [AppUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [AppScalarWhereInput!]
  updateMany: [AppUpdateManyWithWhereNestedInput!]
}

input AppUpdateManyWithWhereNestedInput {
  where: AppScalarWhereInput!
  data: AppUpdateManyDataInput!
}

input AppUpdateOneRequiredWithoutFlowsInput {
  create: AppCreateWithoutFlowsInput
  update: AppUpdateWithoutFlowsDataInput
  upsert: AppUpsertWithoutFlowsInput
  connect: AppWhereUniqueInput
}

input AppUpdateWithoutCreatedByDataInput {
  url: String
  flows: FlowUpdateManyWithoutAssociatedWithInput
}

input AppUpdateWithoutFlowsDataInput {
  url: String
  createdBy: UserUpdateOneRequiredWithoutAppsInput
}

input AppUpdateWithWhereUniqueWithoutCreatedByInput {
  where: AppWhereUniqueInput!
  data: AppUpdateWithoutCreatedByDataInput!
}

input AppUpsertWithoutFlowsInput {
  update: AppUpdateWithoutFlowsDataInput!
  create: AppCreateWithoutFlowsInput!
}

input AppUpsertWithWhereUniqueWithoutCreatedByInput {
  where: AppWhereUniqueInput!
  update: AppUpdateWithoutCreatedByDataInput!
  create: AppCreateWithoutCreatedByInput!
}

input AppWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdBy: UserWhereInput
  flows_every: FlowWhereInput
  flows_some: FlowWhereInput
  flows_none: FlowWhereInput
  AND: [AppWhereInput!]
  OR: [AppWhereInput!]
  NOT: [AppWhereInput!]
}

input AppWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Flow {
  id: ID!
  title: String!
  flowType: FlowType!
  associatedWith: App!
  steps(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Step!]
}

type FlowConnection {
  pageInfo: PageInfo!
  edges: [FlowEdge]!
  aggregate: AggregateFlow!
}

input FlowCreateInput {
  id: ID
  title: String!
  flowType: FlowType!
  associatedWith: AppCreateOneWithoutFlowsInput!
  steps: StepCreateManyWithoutAssociatedWithInput
}

input FlowCreateManyWithoutAssociatedWithInput {
  create: [FlowCreateWithoutAssociatedWithInput!]
  connect: [FlowWhereUniqueInput!]
}

input FlowCreateOneWithoutStepsInput {
  create: FlowCreateWithoutStepsInput
  connect: FlowWhereUniqueInput
}

input FlowCreateWithoutAssociatedWithInput {
  id: ID
  title: String!
  flowType: FlowType!
  steps: StepCreateManyWithoutAssociatedWithInput
}

input FlowCreateWithoutStepsInput {
  id: ID
  title: String!
  flowType: FlowType!
  associatedWith: AppCreateOneWithoutFlowsInput!
}

type FlowEdge {
  node: Flow!
  cursor: String!
}

enum FlowOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  flowType_ASC
  flowType_DESC
}

type FlowPreviousValues {
  id: ID!
  title: String!
  flowType: FlowType!
}

input FlowScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  flowType: FlowType
  flowType_not: FlowType
  flowType_in: [FlowType!]
  flowType_not_in: [FlowType!]
  AND: [FlowScalarWhereInput!]
  OR: [FlowScalarWhereInput!]
  NOT: [FlowScalarWhereInput!]
}

type FlowSubscriptionPayload {
  mutation: MutationType!
  node: Flow
  updatedFields: [String!]
  previousValues: FlowPreviousValues
}

input FlowSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FlowWhereInput
  AND: [FlowSubscriptionWhereInput!]
  OR: [FlowSubscriptionWhereInput!]
  NOT: [FlowSubscriptionWhereInput!]
}

enum FlowType {
  MODAL
  HOTSPOT
}

input FlowUpdateInput {
  title: String
  flowType: FlowType
  associatedWith: AppUpdateOneRequiredWithoutFlowsInput
  steps: StepUpdateManyWithoutAssociatedWithInput
}

input FlowUpdateManyDataInput {
  title: String
  flowType: FlowType
}

input FlowUpdateManyMutationInput {
  title: String
  flowType: FlowType
}

input FlowUpdateManyWithoutAssociatedWithInput {
  create: [FlowCreateWithoutAssociatedWithInput!]
  delete: [FlowWhereUniqueInput!]
  connect: [FlowWhereUniqueInput!]
  set: [FlowWhereUniqueInput!]
  disconnect: [FlowWhereUniqueInput!]
  update: [FlowUpdateWithWhereUniqueWithoutAssociatedWithInput!]
  upsert: [FlowUpsertWithWhereUniqueWithoutAssociatedWithInput!]
  deleteMany: [FlowScalarWhereInput!]
  updateMany: [FlowUpdateManyWithWhereNestedInput!]
}

input FlowUpdateManyWithWhereNestedInput {
  where: FlowScalarWhereInput!
  data: FlowUpdateManyDataInput!
}

input FlowUpdateOneRequiredWithoutStepsInput {
  create: FlowCreateWithoutStepsInput
  update: FlowUpdateWithoutStepsDataInput
  upsert: FlowUpsertWithoutStepsInput
  connect: FlowWhereUniqueInput
}

input FlowUpdateWithoutAssociatedWithDataInput {
  title: String
  flowType: FlowType
  steps: StepUpdateManyWithoutAssociatedWithInput
}

input FlowUpdateWithoutStepsDataInput {
  title: String
  flowType: FlowType
  associatedWith: AppUpdateOneRequiredWithoutFlowsInput
}

input FlowUpdateWithWhereUniqueWithoutAssociatedWithInput {
  where: FlowWhereUniqueInput!
  data: FlowUpdateWithoutAssociatedWithDataInput!
}

input FlowUpsertWithoutStepsInput {
  update: FlowUpdateWithoutStepsDataInput!
  create: FlowCreateWithoutStepsInput!
}

input FlowUpsertWithWhereUniqueWithoutAssociatedWithInput {
  where: FlowWhereUniqueInput!
  update: FlowUpdateWithoutAssociatedWithDataInput!
  create: FlowCreateWithoutAssociatedWithInput!
}

input FlowWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  flowType: FlowType
  flowType_not: FlowType
  flowType_in: [FlowType!]
  flowType_not_in: [FlowType!]
  associatedWith: AppWhereInput
  steps_every: StepWhereInput
  steps_some: StepWhereInput
  steps_none: StepWhereInput
  AND: [FlowWhereInput!]
  OR: [FlowWhereInput!]
  NOT: [FlowWhereInput!]
}

input FlowWhereUniqueInput {
  id: ID
  title: String
}

scalar Long

type Mutation {
  createApp(data: AppCreateInput!): App!
  updateApp(data: AppUpdateInput!, where: AppWhereUniqueInput!): App
  updateManyApps(data: AppUpdateManyMutationInput!, where: AppWhereInput): BatchPayload!
  upsertApp(where: AppWhereUniqueInput!, create: AppCreateInput!, update: AppUpdateInput!): App!
  deleteApp(where: AppWhereUniqueInput!): App
  deleteManyApps(where: AppWhereInput): BatchPayload!
  createFlow(data: FlowCreateInput!): Flow!
  updateFlow(data: FlowUpdateInput!, where: FlowWhereUniqueInput!): Flow
  updateManyFlows(data: FlowUpdateManyMutationInput!, where: FlowWhereInput): BatchPayload!
  upsertFlow(where: FlowWhereUniqueInput!, create: FlowCreateInput!, update: FlowUpdateInput!): Flow!
  deleteFlow(where: FlowWhereUniqueInput!): Flow
  deleteManyFlows(where: FlowWhereInput): BatchPayload!
  createStep(data: StepCreateInput!): Step!
  updateStep(data: StepUpdateInput!, where: StepWhereUniqueInput!): Step
  updateManySteps(data: StepUpdateManyMutationInput!, where: StepWhereInput): BatchPayload!
  upsertStep(where: StepWhereUniqueInput!, create: StepCreateInput!, update: StepUpdateInput!): Step!
  deleteStep(where: StepWhereUniqueInput!): Step
  deleteManySteps(where: StepWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  app(where: AppWhereUniqueInput!): App
  apps(where: AppWhereInput, orderBy: AppOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [App]!
  appsConnection(where: AppWhereInput, orderBy: AppOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppConnection!
  flow(where: FlowWhereUniqueInput!): Flow
  flows(where: FlowWhereInput, orderBy: FlowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flow]!
  flowsConnection(where: FlowWhereInput, orderBy: FlowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FlowConnection!
  step(where: StepWhereUniqueInput!): Step
  steps(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Step]!
  stepsConnection(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StepConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Step {
  id: ID!
  order: Int
  text: String!
  associatedWith: Flow!
}

type StepConnection {
  pageInfo: PageInfo!
  edges: [StepEdge]!
  aggregate: AggregateStep!
}

input StepCreateInput {
  id: ID
  order: Int
  text: String!
  associatedWith: FlowCreateOneWithoutStepsInput!
}

input StepCreateManyWithoutAssociatedWithInput {
  create: [StepCreateWithoutAssociatedWithInput!]
  connect: [StepWhereUniqueInput!]
}

input StepCreateWithoutAssociatedWithInput {
  id: ID
  order: Int
  text: String!
}

type StepEdge {
  node: Step!
  cursor: String!
}

enum StepOrderByInput {
  id_ASC
  id_DESC
  order_ASC
  order_DESC
  text_ASC
  text_DESC
}

type StepPreviousValues {
  id: ID!
  order: Int
  text: String!
}

input StepScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [StepScalarWhereInput!]
  OR: [StepScalarWhereInput!]
  NOT: [StepScalarWhereInput!]
}

type StepSubscriptionPayload {
  mutation: MutationType!
  node: Step
  updatedFields: [String!]
  previousValues: StepPreviousValues
}

input StepSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StepWhereInput
  AND: [StepSubscriptionWhereInput!]
  OR: [StepSubscriptionWhereInput!]
  NOT: [StepSubscriptionWhereInput!]
}

input StepUpdateInput {
  order: Int
  text: String
  associatedWith: FlowUpdateOneRequiredWithoutStepsInput
}

input StepUpdateManyDataInput {
  order: Int
  text: String
}

input StepUpdateManyMutationInput {
  order: Int
  text: String
}

input StepUpdateManyWithoutAssociatedWithInput {
  create: [StepCreateWithoutAssociatedWithInput!]
  delete: [StepWhereUniqueInput!]
  connect: [StepWhereUniqueInput!]
  set: [StepWhereUniqueInput!]
  disconnect: [StepWhereUniqueInput!]
  update: [StepUpdateWithWhereUniqueWithoutAssociatedWithInput!]
  upsert: [StepUpsertWithWhereUniqueWithoutAssociatedWithInput!]
  deleteMany: [StepScalarWhereInput!]
  updateMany: [StepUpdateManyWithWhereNestedInput!]
}

input StepUpdateManyWithWhereNestedInput {
  where: StepScalarWhereInput!
  data: StepUpdateManyDataInput!
}

input StepUpdateWithoutAssociatedWithDataInput {
  order: Int
  text: String
}

input StepUpdateWithWhereUniqueWithoutAssociatedWithInput {
  where: StepWhereUniqueInput!
  data: StepUpdateWithoutAssociatedWithDataInput!
}

input StepUpsertWithWhereUniqueWithoutAssociatedWithInput {
  where: StepWhereUniqueInput!
  update: StepUpdateWithoutAssociatedWithDataInput!
  create: StepCreateWithoutAssociatedWithInput!
}

input StepWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  associatedWith: FlowWhereInput
  AND: [StepWhereInput!]
  OR: [StepWhereInput!]
  NOT: [StepWhereInput!]
}

input StepWhereUniqueInput {
  id: ID
}

type Subscription {
  app(where: AppSubscriptionWhereInput): AppSubscriptionPayload
  flow(where: FlowSubscriptionWhereInput): FlowSubscriptionPayload
  step(where: StepSubscriptionWhereInput): StepSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String
  email: String!
  password: String!
  apps(where: AppWhereInput, orderBy: AppOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [App!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String
  email: String!
  password: String!
  apps: AppCreateManyWithoutCreatedByInput
}

input UserCreateOneWithoutAppsInput {
  create: UserCreateWithoutAppsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAppsInput {
  id: ID
  firstName: String!
  lastName: String
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  apps: AppUpdateManyWithoutCreatedByInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutAppsInput {
  create: UserCreateWithoutAppsInput
  update: UserUpdateWithoutAppsDataInput
  upsert: UserUpsertWithoutAppsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAppsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

input UserUpsertWithoutAppsInput {
  update: UserUpdateWithoutAppsDataInput!
  create: UserCreateWithoutAppsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  apps_every: AppWhereInput
  apps_some: AppWhereInput
  apps_none: AppWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    